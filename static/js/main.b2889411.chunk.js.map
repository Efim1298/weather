{"version":3,"sources":["components/info.js","components/form.js","components/weather.js","App.js","serviceWorker.js","index.js"],"names":["Info","Form","props","onSubmit","weatherMethod","type","name","placeholder","Weather","className","city","country","temp","pressure","sunset","error","API_KEY","App","state","undefined","sunrise","gettingWeather","e","a","preventDefault","target","elements","value","fetch","api_url","json","data","temp_date","Math","round","main","date","Date","sys","hours","getHours","minutes","getMinutes","sunset_date","substr","pressure_value","setState","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wQASeA,EAPF,kBACX,6BACE,+GACA,8MCIWC,EAPF,SAACC,GAAD,OACX,0BAAMC,SAAUD,EAAME,eACpB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,mCAC3C,4HCmBWC,EAtBC,SAACN,GAAD,OACd,yBAAKO,UAAU,aACZP,EAAMQ,MACL,6BACE,2BACE,uHADF,IACgCR,EAAMQ,KADtC,KAC8CR,EAAMS,SAEpD,2BACE,qGADF,IAC6BT,EAAMU,MAEnC,2BACE,2DADF,IACsBV,EAAMW,UAE5B,2BACE,gGADF,IAC6BX,EAAMY,SAIvC,uBAAGL,UAAU,SAASP,EAAMa,SCd1BC,G,KAAU,oCAuEDC,E,4MApEbC,MAAQ,CACNN,UAAMO,EACNT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVC,aAASD,EACTL,YAAQK,EACRJ,WAAOI,G,EAGTE,e,uCAAiB,WAAOC,GAAP,+BAAAC,EAAA,yDACfD,EAAEE,mBACId,EAAOY,EAAEG,OAAOC,SAAShB,KAAKiB,OAFrB,iCAKSC,MAAM,oDAAD,OAAqDlB,EAArD,kBAAmEM,EAAnE,kBALd,cAKPa,EALO,gBAMMA,EAAQC,OANd,OAMPC,EANO,OAQTC,EAAYC,KAAKC,MAAMH,EAAKI,KAAKvB,MAAQ,OAEzCwB,EAAO,IAAIC,KAAuB,IAAlBN,EAAKO,IAAIxB,QACzByB,EAAQH,EAAKI,WACbC,EAAU,IAAML,EAAKM,aACrBC,EAAcJ,EAAQ,IAAME,EAAQG,QAAQ,GAE5CC,EAAiBZ,KAAKC,MAAMH,EAAKI,KAAKtB,SAAW,OAAS,2CAE9D,EAAKiC,SAAS,CACZlC,KAAMoB,EACNtB,KAAMqB,EAAKzB,KACXK,QAASoB,EAAKO,IAAI3B,QAClBE,SAAUgC,EACV/B,OAAQ6B,EACR5B,WAAOI,IAvBI,wBA0Bb,EAAK2B,SAAS,CACZlC,UAAMO,EACNT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,YAAQK,EACRJ,MAAO,8GAhCI,4C,6GAsCf,OACE,yBAAKN,UAAU,WACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,iBACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,iBACb,kBAAC,EAAD,CAAML,cAAe2C,KAAK1B,iBAC1B,kBAAC,EAAD,CAAST,KAAMmC,KAAK7B,MAAMN,KAAMF,KAAMqC,KAAK7B,MAAMR,KAAMC,QAASoC,KAAK7B,MAAMP,QAASE,SAAUkC,KAAK7B,MAAML,SAAUC,OAAQiC,KAAK7B,MAAMJ,OAAQC,MAAOgC,KAAK7B,MAAMH,iB,GA3D9JiC,IAAMC,W,MCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.b2889411.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Info = () => (\r\n  <div>\r\n    <h2>Додаток погоди</h2>\r\n    <p>Дізнайтесь погоду у вашому місті!</p>\r\n  </div>\r\n);\r\n\r\nexport default Info;\r\n","import React from \"react\";\r\n\r\nconst Form = (props) => (\r\n  <form onSubmit={props.weatherMethod}>\r\n    <input type=\"text\" name=\"city\" placeholder=\"Місто\" />\r\n    <button> Отримати погоду</button>\r\n  </form>\r\n);\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\nconst Weather = (props) => (\r\n  <div className=\"infoWeath\">\r\n    {props.city && (\r\n      <div>\r\n        <p>\r\n          <span>Місцеположення:</span> {props.city}, {props.country}\r\n        </p>\r\n        <p>\r\n          <span>Температура:</span> {props.temp}\r\n        </p>\r\n        <p>\r\n          <span>Тиск:</span> {props.pressure}\r\n        </p>\r\n        <p>\r\n          <span>Захід сонця:</span> {props.sunset}\r\n        </p>\r\n      </div>\r\n    )}\r\n    <p className=\"error\">{props.error}</p>\r\n  </div>\r\n);\r\n\r\nexport default Weather;\r\n","import React from \"react\";\r\nimport Info from \"./components/info\";\r\nimport Form from \"./components/form\";\r\nimport Weather from \"./components/weather\";\r\nimport \"./App.css\";\r\n\r\nconst API_KEY = \"b29d3706fedf840cf7809726b1a0c804\";\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    temp: undefined,\r\n    city: undefined,\r\n    country: undefined,\r\n    pressure: undefined,\r\n    sunrise: undefined,\r\n    sunset: undefined,\r\n    error: undefined,\r\n  };\r\n\r\n  gettingWeather = async (e) => {\r\n    e.preventDefault();\r\n    const city = e.target.elements.city.value;\r\n\r\n    if (city) {\r\n      const api_url = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);\r\n      const data = await api_url.json();\r\n\r\n      var temp_date = Math.round(data.main.temp) + \"°\";\r\n\r\n      var date = new Date(data.sys.sunset * 1000);\r\n      var hours = date.getHours(); // Minutes part from the timestamp\r\n      var minutes = \"0\" + date.getMinutes();\r\n      var sunset_date = hours + \":\" + minutes.substr(-2);\r\n\r\n      var pressure_value = Math.round(data.main.pressure / 1.333) + \" мм.рт.ст.\";\r\n\r\n      this.setState({\r\n        temp: temp_date,\r\n        city: data.name,\r\n        country: data.sys.country,\r\n        pressure: pressure_value,\r\n        sunset: sunset_date,\r\n        error: undefined,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        temp: undefined,\r\n        city: undefined,\r\n        country: undefined,\r\n        pressure: undefined,\r\n        sunset: undefined,\r\n        error: \"Введіть назву міста!\",\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"wrapper\">\r\n        <div className=\"main\">\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"col-sm-5 info\">\r\n                <Info />\r\n              </div>\r\n              <div className=\"col-sm-7 form\">\r\n                <Form weatherMethod={this.gettingWeather} />\r\n                <Weather temp={this.state.temp} city={this.state.city} country={this.state.country} pressure={this.state.pressure} sunset={this.state.sunset} error={this.state.error} />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}